# -*- coding: utf-8 -*-
"""LAB6IAProdanConstantinIustin

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oueQSYKg8I7L-_jdjOE1oVxDe-PvG6u1
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
import time
import matplotlib.pyplot as plt

# Citirea setului de date
data = pd.read_csv("mnist_train.csv")

# Împărțirea setului de date în caracteristici și țintă
X = data.drop("label", axis=1)
y = data["label"]

# Împărțirea setului de date în set de antrenare și set de testare
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Folosirea algoritmului Random Forest Classifier ca algoritm de tip ensemble
start_time = time.time()
rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)
rf_classifier.fit(X_train, y_train)
rf_pred = rf_classifier.predict(X_test)
rf_accuracy = accuracy_score(y_test, rf_pred)
rf_training_time = time.time() - start_time

print(f"Random Forest Classifier Accuracy: {rf_accuracy}")
print(f"Random Forest Classifier Training Time: {rf_training_time} seconds")

# Folosirea algorimtului K-Nearest Neighbors (KNN) ca tip de algoritm clasic
start_time = time.time()
knn_classifier = KNeighborsClassifier(n_neighbors=3)
knn_classifier.fit(X_train, y_train)
knn_pred = knn_classifier.predict(X_test)
knn_accuracy = accuracy_score(y_test, knn_pred)
knn_training_time = time.time() - start_time

print(f"KNN Accuracy: {knn_accuracy}")
print(f"KNN Training Time: {knn_training_time} seconds")

# Compararea performanțelor folosind un grafic
algorithms = ['Random Forest Classifier', 'KNN']
accuracies = [rf_accuracy, knn_accuracy]
training_times = [rf_training_time, knn_training_time]

# Plotarea acurateții
plt.figure(figsize=(8, 5))
plt.subplot(1, 2, 1)
plt.bar(algorithms, accuracies, color=['blue', 'green'])
plt.title('Accuracy')
plt.ylim(0.9, 1.0)

# Plotarea timpului de antrenare
plt.subplot(1, 2, 2)
plt.bar(algorithms, training_times, color=['orange', 'red'])
plt.title('Training Time (seconds)')

plt.tight_layout()
plt.show()