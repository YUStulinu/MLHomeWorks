# -*- coding: utf-8 -*-
"""LAB5IAProdanConstantinIustin

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eVIJ8Oybv0jqdHs0r8T_mqDgmxOP_ifk
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.feature_selection import RFE
from sklearn.model_selection import cross_val_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score

# Încărcăm setul de date
data = pd.read_csv("actual.csv")

# Antrenăm valoarea țintă
target = data['cancer']
data = data.drop(['cancer'], axis=1)

# Împărțim datele în seturi de antrenare și testare
X_train, X_test, y_train, y_test = train_test_split(data, target, test_size=0.2, random_state=42)

# Definim o funcție care să aplice algoritmul PCA
def aplicare_pca(data, n_components):
    pca = PCA(n_components=n_components)
    pca_data = pca.fit_transform(data)
    return pd.DataFrame(pca_data)

# Definim o funcție care să aplice un algoritm de clasificare și să evalueze performanța acestuia
def evaluare_clasificator(data, target):
    clf = DecisionTreeClassifier()
    scoruri = cross_val_score(clf, data, target, cv=10)
    return np.mean(scoruri)

# Utilizăm LabelEncoder pentru a converti variabila țintă într-o formă numerică
label_encoder = LabelEncoder()
y_train_encoded = label_encoder.fit_transform(y_train)

# Aplicăm funcția de selecție a atributelor și funcția de evaluare a performanței algoritmului de clasificare pentru fiecare număr de atribute și afișăm rezultatele
for i in range(1, data.shape[1] + 1):
    pca_data_antrenare = aplicare_pca(X_train, i)

    # Verificare și ajustare pentru a evita erorile RFE
    numar_selectare = min(2, pca_data_antrenare.shape[1])
    if numar_selectare <= i and pca_data_antrenare.shape[1] >= 2:
        rfe = RFE(estimator=DecisionTreeClassifier(), n_features_to_select=numar_selectare)
        rfe_data_antrenare = rfe.fit_transform(pca_data_antrenare, y_train_encoded)
        scor = evaluare_clasificator(rfe_data_antrenare, y_train_encoded)
        print(f'Numărul de atribute: {i}, Performanța pe setul de antrenare: {scor}')

        # Aplicăm aceleași transformări setului de testare
        pca_data_testare = aplicare_pca(X_test, i)
        rfe_data_testare = rfe.transform(pca_data_testare)
        scor_testare = evaluare_clasificator(rfe_data_testare, label_encoder.transform(y_test))
        print(f'Numărul de atribute: {i}, Performanța pe setul de testare: {scor_testare}')
    else:
        print(f'Numărul minim de caracteristici necesare de RFE este prea mare sau numărul de componente PCA este prea mic ({i}).')

# Listele pentru a stoca rezultatele
numar_atribute = []
performanta_pca_antrenare = []
performanta_rfe_antrenare = []

# Range-ul pentru numărul de componente PCA și de caracteristici pentru RFE
for i in range(1, data.shape[1] + 1):
    pca_data_antrenare = aplicare_pca(X_train, i)

    # Performanța PCA
    clf_pca = DecisionTreeClassifier()
    scor_pca_antrenare = np.mean(cross_val_score(clf_pca, pca_data_antrenare, y_train_encoded, cv=10))
    performanta_pca_antrenare.append(scor_pca_antrenare)

    # Adăugăm numărul curent de componente PCA în listă
    numar_atribute.append(i)

    # Verificare și ajustare pentru a evita erorile RFE
    numar_selectare = min(2, pca_data_antrenare.shape[1])
    if numar_selectare <= i and pca_data_antrenare.shape[1] >= 2:
        rfe = RFE(estimator=DecisionTreeClassifier(), n_features_to_select=numar_selectare)
        rfe_data_antrenare = rfe.fit_transform(pca_data_antrenare, y_train_encoded)
        clf_rfe = DecisionTreeClassifier()
        scor_rfe_antrenare = np.mean(cross_val_score(clf_rfe, rfe_data_antrenare, y_train_encoded, cv=10))
        performanta_rfe_antrenare.append(scor_rfe_antrenare)
    else:
        # Adăugăm o valoare implicită pentru performanța RFE când condiția nu este îndeplinită
        performanta_rfe_antrenare.append(0.0)

# Plot
plt.figure(figsize=(10, 6))
plt.plot(numar_atribute, performanta_pca_antrenare, label='PCA', marker='o')
plt.plot(numar_atribute, performanta_rfe_antrenare, label='RFE', marker='x')
plt.xlabel('Numărul de componente')
plt.ylabel('Performanța pe setul de antrenare')
plt.title('Compararea impactului PCA și RFE asupra performanței')
plt.legend()
plt.show()