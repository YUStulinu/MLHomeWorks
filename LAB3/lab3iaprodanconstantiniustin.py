# -*- coding: utf-8 -*-
"""LAB3IAProdanConstantinIustin

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l927QnKpc28ECDCvRxZ5SNjiTkYvGNk3
"""

import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import confusion_matrix

# Încărcăm setul de date
df = pd.read_csv("train.csv")

# Împărțim setul de date în seturi de instruire și testare
X_train, X_test, y_train, y_test = train_test_split(df['review'], df['label'], random_state=0)

# Vectorizăm datele text
vect = CountVectorizer().fit(X_train)
X_train_vectorized = vect.transform(X_train)

# Antrenăm modelul "Naive Bayes"
nb = MultinomialNB()
nb.fit(X_train_vectorized, y_train)

# Antrenăm modelul "Decision Tree"
dt = DecisionTreeClassifier()
dt.fit(X_train_vectorized, y_train)

# Predicții pentru setul de date "Naive Bayes"
y_pred_nb = nb.predict(vect.transform(X_test))

# Predicții pentru setul de date "Decision Tree"
y_pred_dt = dt.predict(vect.transform(X_test))

# Evaluăm performanța modelelor folosind o matrice de confuzie
nb_confusion_matrix = confusion_matrix(y_test, y_pred_nb)
dt_confusion_matrix = confusion_matrix(y_test, y_pred_dt)

print("Matricea de confuzie pentru Naive Bayes:\n", nb_confusion_matrix)
print("Matricea de confuzie pentru Decision Trees:\n", dt_confusion_matrix)