# -*- coding: utf-8 -*-
"""LAB4IAProdanConstantinIustin.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13pYEZTQ8i9LTA-fOvZZzl5TmNprIGZBx
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans, AgglomerativeClustering
from sklearn.metrics import silhouette_score
from scipy.cluster.hierarchy import dendrogram, linkage

# Încărcăm setul de date
df = pd.read_csv("Mall_Customers.csv")

# Preprocesăm datele
X = df.iloc[:, [3, 4]].values

# Folosim algoritmul de clustering K-Means
kmeans = KMeans(n_clusters=5, init='k-means++', max_iter=300, n_init=10, random_state=0)
kmeans_labels = kmeans.fit_predict(X)

# Vizualizăm rezultatele pentru algoritmul de clustering K-Means
plt.figure(figsize=(12, 6))
plt.scatter(X[:, 0], X[:, 1], c=kmeans_labels, cmap='viridis', edgecolors='k', s=100)
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='X', label='Centroids')
plt.title('K-Means Clustering')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.legend()
plt.show()

# Calculăm metrica de comparare Silhouette Score pentru algoritmul de clustering K-Means
silhouette_kmeans = silhouette_score(X, kmeans_labels)
print(f"Silhouette Score (K-Means): {silhouette_kmeans}")

# Calculăm metrica de comparare Inertia pentru algoritmul de clustering K-Means
inertia_kmeans = kmeans.inertia_
print(f"Inertia (K-Means): {inertia_kmeans}")

# Folosim algoritmul de clustering Agglomerative Hierarchical Clustering
linkage_matrix = linkage(X, method='ward')
dendrogram(linkage_matrix)
plt.title('Dendrogram')
plt.xlabel('Index Data Points')
plt.ylabel('Euclidean distance')
plt.show()

# Vizualizăm rezultatele pentru algoritmul de clustering Agglomerative Hierarchical Clustering
agg_labels = AgglomerativeClustering(n_clusters=5, affinity='euclidean', linkage='ward').fit_predict(X)

plt.figure(figsize=(12, 6))
plt.scatter(X[:, 0], X[:, 1], c=agg_labels, cmap='viridis', edgecolors='k', s=100)
plt.title('Agglomerative Hierarchical Clustering')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.show()

# Calculăm metrica de comparare Silhouette Score pentru algoritmul de clustering Agglomerative Hierarchical Clustering
silhouette_agg = silhouette_score(X, agg_labels)
print(f"Silhouette Score (Agglomerative): {silhouette_agg}")